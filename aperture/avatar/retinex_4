uniform sampler2D bgl_RenderedTexture;


#define MIN(a,b) (a>b)?b:a
#define MAX(a,b) (a>b)?a:b
vec3 contrast( in vec3 value )
{
	static float fac = 0.8;
	
	static float max = MAX(MAX(value.x, value.y), value.z);
	value.x -= (max-value.x)*fac;
	value.y -= (max-value.y)*fac;
	value.z -= (max-value.z)*fac;
	
	return value;
}


vec3 max( in vec3 a, in vec3 b)
{
	static vec3 r = vec3(0);
	r.x = MAX(a.x, b.x);
	r.y = MAX(a.y, b.y);
	r.z = MAX(a.z, b.z);
	return r;
}

#define BRUSH_LEN 27
const vec2 brush [BRUSH_LEN] = {
vec2( 0,-3), vec2( 0,-2), vec2( 0,-1), vec2( 0,0), vec2( 0,1), vec2( 0,2), vec2( 0,3), 
vec2( 1,-2), vec2( 1,-1), vec2( 1,0), vec2( 1,1), vec2( 1,2), 
vec2( 2,-2), vec2( 2,-1), vec2( 2,0), vec2( 2,1), vec2( 2,2), 
vec2(-2,-2), vec2(-2,-1), vec2(-2,0), vec2(-2,1), vec2(-2,2), 
vec2(-1,-2), vec2(-1,-1), vec2(-1,0), vec2(-1,1), vec2(-1,2), 
};


void main(void)
{

	vec3 bloom = vec3(0);
	vec3 pix = vec3(0);
	
	int i;

	for(i=0; i<BRUSH_LEN; i++)
	{
		pix= texture2D(bgl_RenderedTexture, gl_TexCoord[0].st + brush[i]*0.0020); // 0.0016
		if (pix.x > 0.5) bloom.x += pix.x;
		if (pix.y > 0.5) bloom.y += pix.y;
		if (pix.z > 0.5) bloom.z += pix.z;
	}
	bloom *= 1/float(BRUSH_LEN);
	static vec3 value =  texture2D(bgl_RenderedTexture, gl_TexCoord[0].st);
	
	value = max(value,contrast(bloom));
	gl_FragColor = vec4(value.x, value.y, value.z, 1);
	
}

/*
size = 3
from math import *

t = '{\n'
n = 0
for x in range(0, size):
	c = int(sin(acos(x/size))*size)
	for y in range(-c, c+1):
		t += 'vec2( '+str(x)+','+str(y)+'), '
		n += 1
	t += '\n'


for x in range(-size+1, 0):
	c = int(sin(acos(-x/size))*size)
	for y in range(-c, c+1):
		t += 'vec2('+str(x)+','+str(y)+'), '
		n += 1
	t += '\n'


t += '}\n'

print(t)
print(n)
*/