uniform sampler2D bgl_RenderedTexture;

uniform float retinex_size;

vec4 sample( in vec2 coord ) 
{
	return texture2D(bgl_RenderedTexture, coord );
}

#define MIN(a,b) (a>b)?b:a
#define MAX(a,b) (a>b)?a:b
vec4 contrast( in vec4 value )
{
	float fac = 0.8;
	//float med = (value.x+value.y+value.z)/3;
	//vec4 result = (value - vec4(med)*0.8)*3;
	
	float max = MAX(MAX(value.x, value.y), value.z);
	value.x -= (max-value.x)*fac;
	value.y -= (max-value.y)*fac;
	value.z -= (max-value.z)*fac;
	
	return value;
}


vec4 max( in vec4 a, in vec4 b)
{
	vec4 r = vec4(0);
	r.x = (a.x>b.x)?a.x:b.x;
	r.y = (a.y>b.y)?a.y:b.y;
	r.z = (a.z>b.z)?a.z:b.z;
	return r;
}

void main(void)
{

	vec4 bloom = vec4(0);
		
	int j;
	int i;

	for(i=-retinex_size; i<=retinex_size; i++)
	{
        for (j=-retinex_size; j<=retinex_size; j++)
        {
            bloom += sample (gl_TexCoord[0].st + vec2(j, i)*0.002);
        }
    }
	bloom *= 1/float((retinex_size*2+1)*(retinex_size*2+1));
	vec4 value =  texture2D(bgl_RenderedTexture, gl_TexCoord[0].st);
    
    gl_FragColor = max(value,contrast(bloom));

}

/*
size = 5
from math import *
t = '{\n'
for x in range(0, size):
	c = int(sin(acos(x/size))*size)
	for y in range(-c, c+1):
		t += '{ '+str(x)+','+str(y)+'}, '
	t += '\n'


for x in range(-size+1, 0):
	c = int(sin(acos(-x/size))*size)
	for y in range(-c, c+1):
		t += '{'+str(x)+','+str(y)+'}, '
	t += '\n'


t += '}\n'

print(t)
*/